// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Workflow.Persistence;

#nullable disable

namespace Workflow.Persistence.Migrations
{
    [DbContext(typeof(WFContext))]
    partial class WFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Entities.ActionDossier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DossierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("ActionsDossiers");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DossierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomFichier")
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjetId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PointOrdreJourId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeObjet")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("PointOrdreJourId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Dossier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeTraitantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Intervenant")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceTraitantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Statut")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeTraitantId");

                    b.HasIndex("ServiceTraitantId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LienObjet")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Lu")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.PointOrdreJour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Decision")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DossierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeanceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Statut")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.HasIndex("SeanceId");

                    b.ToTable("PointsOrdreJour");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Seance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Heure")
                        .HasColumnType("TEXT");

                    b.Property<int>("Statut")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Seances");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ServiceId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PointOrdreJourId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Valeur")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PointOrdreJourId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Utilisateur", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workflow.Domain.Entities.ActionDossier", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Dossier", "Dossier")
                        .WithMany("Historique")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Dossier");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Document", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Dossier", null)
                        .WithMany("Documents")
                        .HasForeignKey("DossierId");

                    b.HasOne("Workflow.Domain.Entities.PointOrdreJour", null)
                        .WithMany("Documents")
                        .HasForeignKey("PointOrdreJourId");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Dossier", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Utilisateur", "EmployeTraitant")
                        .WithMany()
                        .HasForeignKey("EmployeTraitantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Workflow.Domain.Entities.Service", "ServiceTraitant")
                        .WithMany()
                        .HasForeignKey("ServiceTraitantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeTraitant");

                    b.Navigation("ServiceTraitant");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany("Notifications")
                        .HasForeignKey("UtilisateurId");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.PointOrdreJour", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Dossier", "Dossier")
                        .WithMany("POJs")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Workflow.Domain.Entities.Seance", "Seance")
                        .WithMany("POJs")
                        .HasForeignKey("SeanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("Seance");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Utilisateur", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.Service", "Service")
                        .WithMany("Employes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Vote", b =>
                {
                    b.HasOne("Workflow.Domain.Entities.PointOrdreJour", "PointOrdreJour")
                        .WithMany("Votes")
                        .HasForeignKey("PointOrdreJourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workflow.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany("Votes")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PointOrdreJour");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Dossier", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Historique");

                    b.Navigation("POJs");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.PointOrdreJour", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Seance", b =>
                {
                    b.Navigation("POJs");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Service", b =>
                {
                    b.Navigation("Employes");
                });

            modelBuilder.Entity("Workflow.Domain.Entities.Utilisateur", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
